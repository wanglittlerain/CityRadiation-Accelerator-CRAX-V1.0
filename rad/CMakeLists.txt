include_directories(./)
file(GLOB_RECURSE CODELIST "${PROJECT_SOURCE_DIR}/rad/*.cc" "${PROJECT_SOURCE_DIR}/rad/*.h")
source_group("" FILES ${CODELIST})
#set(CMAKE_EXE_LINKER_FLAGS " -static")
#link_directories(${Libs})
#set(LinkLib common)
if(MSVC)
	link_directories(${Libs})
	set(LinkLib PRIVATE arrow common)
else()
	# For Unix-like systems (Linux, macOS)
	# Try to find Arrow via pkg-config or cmake
	find_package(Arrow QUIET)
	if(Arrow_FOUND)
		set(LinkLib PRIVATE Arrow::arrow_shared common)
	else()
		# Fallback for systems without Arrow installed
		message(WARNING "Arrow not found via find_package, linking without Arrow")
		set(LinkLib PRIVATE common)
	endif()
	link_directories(${Libs})
endif(MSVC)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${Bin})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${Bin})

add_executable(radiation ${CODELIST})
if(APPLE)
	# macOS doesn't support -static-libgcc and -static-libstdc++
	target_link_libraries(radiation ${LinkLib})
else()
	target_link_libraries(radiation ${LinkLib} -static-libgcc -static-libstdc++)
endif()
